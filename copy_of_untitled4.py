# -*- coding: utf-8 -*-
"""Copy of Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178984-vlmBa8xpEgUSt1FWLBs0cwAh1W
"""

import numpy as np

class Perceptron:
    def __init__(self, num_inputs, learning_rate=0.01, epochs=100):
        self.weights = np.random.rand(num_inputs)
        self.threshold = 0
        self.learning_rate = learning_rate
        self.epochs = epochs

    def activation_function(self, x):
        return 1 if x > self.threshold else 0

    def train(self, X_train, y_train):
        for _ in range(self.epochs):
            for inputs, label in zip(X_train, y_train):
                prediction = self.predict(inputs)
                error = label - prediction
                self.weights += self.learning_rate * error * inputs

    def predict(self, inputs):
        weighted_sum = np.dot(inputs, self.weights)
        return self.activation_function(weighted_sum)

# Sample training data (OR gate)
X_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_train = np.array([0, 1, 1, 1])

# Create and train the perceptron
perceptron = Perceptron(num_inputs=2)
perceptron.train(X_train, y_train)

# Test the perceptron
test_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
for inputs in test_inputs:
    prediction = perceptron.predict(inputs)
    print(f"Input: {inputs}, Predicted Output: {prediction}")