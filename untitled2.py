# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7xDKOdwyj7BehVmAPiZ5p-n_iq-5Qes
"""

import numpy as np
class HeteroAssociativeMemory:
    def __init__(self, input_patterns, output_patterns):
        self.input_patterns = np.array(input_patterns)
        self.output_patterns = np.array(output_patterns)
        self.weights = np.zeros((self.input_patterns.shape[1], self.output_patterns.shape[1]))
    def train(self):
        for input_pattern, output_pattern in zip(self.input_patterns, self.output_patterns):
            self.weights += np.outer(input_pattern, output_pattern)
    def recall(self, input_pattern):
        return np.dot(input_pattern, self.weights)
# Example usage:
input_patterns = [[1, 1, 0],
                  [1, 0, 1],
                  [0, 1, 1]]
output_patterns = [[1, 0],
                   [0, 1],
                   [1, 1]]
ham = HeteroAssociativeMemory(input_patterns, output_patterns)
ham.train()
input_pattern = [1, 0, 0]
retrieved_output = ham.recall(input_pattern)
print("Retrieved Output:", retrieved_output)